{"version":3,"sources":["logo.svg","components/objectDetector/index.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["ObjectDetectorContainer","styled","div","DetectorContainer","TargetImg","img","HiddenFileInput","input","SelectButton","button","TargetBox","x","y","width","height","classType","score","toFixed","ObjectDetector","props","fileInputRef","useRef","imageRef","useState","imgData","setImgData","predictions","setPredictions","isLoading","setLoading","isEmptyPredictions","length","normalizePredictions","imgSize","map","prediction","bbox","oldX","oldY","oldWidth","oldHeight","imgWidth","current","imgHeight","detectObjectsOnImage","imageElement","a","cocoSsd","model","detect","normalizedPredictions","console","log","readImage","file","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","onSelectImage","e","target","files","document","createElement","src","ref","idx","class","type","onChange","onClick","click","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2787b006.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport \"@tensorflow/tfjs-backend-cpu\";\n//import \"@tensorflow/tfjs-backend-webgl\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\n\nconst ObjectDetectorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100%;\n`;\n\nconst DetectorContainer = styled.div`\n  min-width: 200px;\n  height: 700px;\n  max-height: 100vh;\n  border: 3px solid #fff;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n\nconst TargetImg = styled.img`\n  height: 100%;\n`;\n\nconst HiddenFileInput = styled.input`\n  display: none;\n`;\n\nconst SelectButton = styled.button`\n  padding: 7px 10px;\n  border: 2px solid transparent;\n  background-color: #fff;\n  color: #0a0f22;\n  font-size: 16px;\n  font-weight: 500;\n  outline: none;\n  margin-top: 2em;\n  cursor: pointer;\n  transition: all 260ms ease-in-out;\n\n  &:hover {\n    background-color: transparent;\n    border: 2px solid #fff;\n    color: #fff;\n  }\n`;\n\nconst TargetBox = styled.div`\n  position: absolute;\n\n  left: ${({ x }) => x + \"px\"};\n  top: ${({ y }) => y + \"px\"};\n  width: ${({ width }) => width + \"px\"};\n  height: ${({ height }) => height + \"px\"};\n\n  border: 4px solid #1ac71a;\n  background-color: transparent;\n  z-index: 20;\n\n  &::before {\n    content: \"${({ classType, score }) => `${classType} ${score.toFixed(1)}%`}\";\n    color: #1ac71a;\n    font-weight: 500;\n    font-size: 17px;\n    position: absolute;\n    top: -1.5em;\n    left: -5px;\n  }\n`;\n\nexport function ObjectDetector(props) {\n  const fileInputRef = useRef();\n  const imageRef = useRef();\n  const [imgData, setImgData] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const isEmptyPredictions = !predictions || predictions.length === 0;\n\n  const openFilePicker = () => {\n    if (fileInputRef.current) fileInputRef.current.click();\n  };\n\n  const normalizePredictions = (predictions, imgSize) => {\n    if (!predictions || !imgSize || !imageRef) return predictions || [];\n    return predictions.map((prediction) => {\n      const { bbox } = prediction;\n      const oldX = bbox[0];\n      const oldY = bbox[1];\n      const oldWidth = bbox[2];\n      const oldHeight = bbox[3];\n\n      const imgWidth = imageRef.current.width;\n      const imgHeight = imageRef.current.height;\n\n      const x = (oldX * imgWidth) / imgSize.width;\n      const y = (oldY * imgHeight) / imgSize.height;\n      const width = (oldWidth * imgWidth) / imgSize.width;\n      const height = (oldHeight * imgHeight) / imgSize.height;\n\n      return { ...prediction, bbox: [x, y, width, height] };\n    });\n  };\n\n  const detectObjectsOnImage = async (imageElement, imgSize) => {\n    const model = await cocoSsd.load({});\n    const predictions = await model.detect(imageElement, 6);\n    const normalizedPredictions = normalizePredictions(predictions, imgSize);\n    setPredictions(normalizedPredictions);\n    console.log(\"Predictions: \", predictions);\n  };\n\n  const readImage = (file) => {\n    return new Promise((rs, rj) => {\n      const fileReader = new FileReader();\n      fileReader.onload = () => rs(fileReader.result);\n      fileReader.onerror = () => rj(fileReader.error);\n      fileReader.readAsDataURL(file);\n    });\n  };\n\n  const onSelectImage = async (e) => {\n    setPredictions([]);\n    setLoading(true);\n\n    const file = e.target.files[0];\n    const imgData = await readImage(file);\n    setImgData(imgData);\n\n    const imageElement = document.createElement(\"img\");\n    imageElement.src = imgData;\n\n    imageElement.onload = async () => {\n      const imgSize = {\n        width: imageElement.width,\n        height: imageElement.height,\n      };\n      await detectObjectsOnImage(imageElement, imgSize);\n      setLoading(false);\n    };\n  };\n\n  return (\n    <ObjectDetectorContainer>\n      <DetectorContainer>\n        {imgData && <TargetImg src={imgData} ref={imageRef} />}\n        {!isEmptyPredictions &&\n          predictions.map((prediction, idx) => (\n            <TargetBox\n              key={idx}\n              x={prediction.bbox[0]}\n              y={prediction.bbox[1]}\n              width={prediction.bbox[2]}\n              height={prediction.bbox[3]}\n              classType={prediction.class}\n              score={prediction.score * 100}\n            />\n          ))}\n      </DetectorContainer>\n      <HiddenFileInput\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={onSelectImage}\n      />\n      <SelectButton onClick={openFilePicker}>\n        {isLoading ? \"Recognizing...\" : \"Select Image\"}\n      </SelectButton>\n    </ObjectDetectorContainer>\n  );\n}\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport { ObjectDetector } from \"./components/objectDetector\";\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #1c2127;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ObjectDetector />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}